% This script will perform a pepisode analysis, which consists of two
% parts. First, the script will calculate the power in each frequency
% across the entire experiment and use this to build a distribution of
% power values for each frequency. The value at 95% of the distribution is
% used as a power threshold in the second part of the analysis. For each
% epoch, the script will calculate the percent of time spent oscillating at
% a given frequency, where the oscillations must exceed both a power
% threshold (95% of the power distribution) and a duration threshold (# of
% cycles).
%
% In this script, we will evaluate three epochs:
% 1. Pre-teleportation (-1000 : 0 ms)
% 2. Teleportation (0 : 1830 ms for NT or 0 : 2830 ms for FT)
% 3. Post-teleportation (1830 : 1930 ms for NT or 2830 : 2930 ms for FT)
%
% Lindsay Vass 29 April 2014
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear all;close all;clc;

%% set parameters for analysis

% Subject info
subjectID  = 'UCDMC15';
subjectDir = ['/Users/Lindsay/Documents/MATLAB/iEEG/Subjects/' subjectID '/'];
teleporter = 'TeleporterA';

% Specify file naming conventions for data. There are
% separate EEG files for each depth electrode, so we will specify every
% part of the path except the depth electrode name. Then, we will later
% combine these as [prefix depthName suffix]. We will use a cell array to
% allow for multiple prefixes or suffixes (e.g., different prefixes for
% EDF1 and EDF2)
cleanedUnepochedPrefix = {[subjectDir 'PreProcessing Intermediates/' subjectID '_' teleporter '_EDF1_unepoched_'], ...
                          [subjectDir 'PreProcessing Intermediates/' subjectID '_' teleporter '_EDF2_unepoched_']};
cleanedUnepochedSuffix = {'_noSpikes_noWaves.set'};

% Do the same for the epoched cleaned data
% cleanedEpochedPrefix   = {[subjectDir 'Epoched Data/' subjectID '_' teleporter '_epoched_']};
% cleanedEpochedSuffix   = {'_noSpikes_noWaves.set'};

% Specify path to save the pepisode calculations to
saveStem = [subjectDir 'Mat Files/Pepisode/' subjectID '_' teleporter '_pepisode_'];

% Specify path to save the cell array of pepisode values to
saveFile = [subjectDir 'Mat Files/Pepisode/Summary/' subjectID '_' teleporter '_pepisode_summary_noSpikes_noWaves.set'];

% channel names to use
chanList  = {'RAD3' 'RAD4' 'RAD5' 'RAD6' 'RHD1' 'RHD2' 'RHD3' 'RHD4' 'LAD3' 'LAD4' 'LAD5' 'LHD1' 'LHD2' 'LHD3'};

% thresholds for pepisode 
durationThresh  = 3; % # of cycles
amplitudeThresh = 95; % percent of distribution
    
% if the distribution of power across the recording has already been
% calculated, set this to 1
skipCompute = 0;

% time periods of interest in ms relative to teleporter entry
timePointNames = {'Pre' 'Tele' 'Post'};
preTele = [-1000 0];
teleNT  = [1 1830];
teleFT  = [1 2830];
postNT  = [1831 2830];
postFT  = [2831 3830];

% frequencies to use
frequencies = logspace(log(1)/log(10),log(181)/log(10),31); % 31 log-spaced frequencies, as in Watrous 2011

%% set paths and filenames
addpath(genpath('/Users/Lindsay/Documents/MATLAB/eeglab13_3_2b'));
addpath(genpath('/Users/Lindsay/Documents/MATLAB/PepisodeCode/'));
addpath(genpath('/Users/Lindsay/Documents/MATLAB/functions/'));
addpath(genpath('/Users/Lindsay/Documents/MATLAB/arne_code/'));

% Make the output directory if it doesn't already exist
if ~exist([subjectDir 'Mat Files/Pepisode/'], 'dir')
    system(['mkdir ' subjectDir 'Mat\ Files/Pepisode/']);
end

if ~exist([subjectDir 'Mat Files/Pepisode/Summary/'], 'dir')
    system(['mkdir ' subjectDir 'Mat\ Files/Pepisode/Summary/']);
end

% Get depth names from chanList
depthNames = unique(cellfun(@(s) s(1:3), chanList, 'UniformOutput', false));

eeglab;


%% Calculate power distributions for pepisode

% In this first step, we will use the cleaned, unepoched EEG files to
% establish a distribution of power values at each frequency of interest.
% This section will return a binary vector  that contains a 0 for each
% point in time without a sustained oscillation at that frequency and a 1
% for each point in time that exceeds both the duration and amplitude
% thresholds (i.e., is a sustained oscillation)

if ~skipCompute
    
    for thisDepth = 1:length(depthNames)
        
        % Find the channels on this depth electrode
        chanDepth = char(chanList);
        chanDepth = chanDepth(:, 1:3); % keep the first 3 characters, removing the electrode #
        chanDepth = cellstr(chanDepth);
        chanInd   = strcmpi(depthNames{thisDepth}, chanDepth);
        chanNames = chanList(chanInd);
        
        % Set up eeg list for this channel
        numEDFs = size(cleanedUnepochedPrefix,2);
        eegList = {};
        for thisEDF = 1:numEDFs
            pathName = [cleanedUnepochedPrefix{thisEDF} depthNames{thisDepth} cleanedUnepochedSuffix{1}];
            eegList{thisEDF} = pathName;
            
        end % thisEDF
        
        % Calculate pepisode
        calcPepisodeLKV(eegList, chanNames, saveStem, frequencies, durationThresh, amplitudeThresh);
        
        
    end % thisDepth
    
end

%% Extract pepisode values for our epochs of interest

% Initialize the cell array to hold all of our pepisode values
pepisodeSummary      = cell(1,11);
pepisodeSummary(1,:) = {'SubjectID','Teleporter','EDF','Electrode','TrialNumber','TrialSpaceType','TrialTimeType','TrialType','TimePoint','Frequency','Pepisode'};
thisRow = 2;

for thisDepth = 1:length(depthNames)
    
    % Find the channels on this depth electrode
    chanDepth = char(chanList);
    chanDepth = chanDepth(:, 1:3); % keep the first 3 characters, removing the electrode #
    chanDepth = cellstr(chanDepth);
    chanInd   = strcmpi(depthNames{thisDepth}, chanDepth);
    chanNames = chanList(chanInd);
    
    % Loop through EEG files
    for thisEDF = 1:numEDFs
        
        % Load cleaned unepoched data
        EEG = pop_loadset([cleanedUnepochedPrefix{thisEDF} depthNames{thisDepth} cleanedUnepochedSuffix{1}]);
        
        % Extract the trial events from the event list (i.e., remove boundary
        % events)
        boundaryInds = strcmpi('boundary', {EEG.event.type});
        trialList    = EEG.event(boundaryInds == 0); % select events that are NOT boundaries
        
        % Loop through channels on this depth electrode
        for thisChan = 1:length(chanNames)
            
            % Path to the binary vector we calculated in the previous step
            binaryVectorFile = [saveStem chanNames{thisChan} '.mat'];
            
            % Loop through trials
            for thisTrial = 1:size(trialList, 2)
                
                % Extract the trial type for this trial
                thisLabel = trialList(thisTrial).type;
                
                % Determine whether it's NS or FS
                if strcmpi('1', thisLabel(1)) == 1
                    thisSpaceType = 'NS';
                elseif strcmpi('2', thisLabel(1)) == 1
                    thisSpaceType = 'FS';
                else
                    error('Unknown trial type')
                end
                
                % Determine whether it's NT or FT
                if strcmpi('1', thisLabel(2)) == 1
                    thisTimeType = 'NT';
                elseif strcmpi('2', thisLabel(2)) == 1
                    thisTimeType = 'FT';
                else
                    error('Unknown trial type')
                end
                
                % Combine them together to make the spatiotemporal type
                thisType = [thisSpaceType thisTimeType];
                
                % Loop through time points
                for thisTimePoint = 1:length(timePointNames)
                    
                    % Obtain the binary vector for the timepoint of
                    % interest
                    switch thisTimePoint
                        case 1 % Pre-teleportation
                            
                            binarySelection = getPepisodeLKV(binaryVectorFile, thisEDF, trialList(thisTrial).latency, preTele(2) - preTele(1), preTele(1), frequencies);
                        
                        case 2 % Teleportation
                            
                            if strcmpi('NT', thisTimeType) == 1
                                binarySelection = getPepisodeLKV(binaryVectorFile, thisEDF, trialList(thisTrial).latency, teleNT(2) - teleNT(1), teleNT(1), frequencies);
                            else
                                binarySelection = getPepisodeLKV(binaryVectorFile, thisEDF, trialList(thisTrial).latency, teleFT(2) - teleFT(1), teleFT(1), frequencies);
                            end
                            
                        case 3 % Post-teleportation
                            
                            if strcmpi('NT', thisTimeType) == 1
                                binarySelection = getPepisodeLKV(binaryVectorFile, thisEDF, trialList(thisTrial).latency, postNT(2) - postNT(1), postNT(1), frequencies);
                            else
                                binarySelection = getPepisodeLKV(binaryVectorFile, thisEDF, trialList(thisTrial).latency, postFT(2) - postFT(1), postFT(1), frequencies);
                            end
                    end % switch thisTimePoint
                    
                    % Take the mean across time
                    meanPepisode = mean(binarySelection,3);
                    
                    % Add the values to the summary cell array
                    for thisFreq = 1:length(frequencies)
                        
                        pepisodeSummary(thisRow,:) = {subjectID, teleporter, thisEDF, chanNames{thisChan}, thisTrial, thisSpaceType, thisTimeType, thisType, timePointNames{thisTimePoint}, 
                        
                    end % thisFreq
                    
                end % thisTimePoint
                 
            end % thisTrial
            
        end % thisChan
        
    end % thisEDF
    
    
end % thisDepth










%% load epochs info
load(epochsFile);
if ~exist('epochsEDF1', 'var') && exist('epochs', 'var')
    epochsEDF1 = epochs';
    epochsEDF1   = round(epochsEDF1 * time_sync_regression(1) + time_sync_regression(2));
end

% get rid of rejected epochs
numEpochs1 = size(epochsEDF1,2);
eType1 = eType(1:numEpochs1);
epochsEDF1(rejectedEpochs1) = [];
eType1(rejectedEpochs1) = [];

% find onset times
onsets1 = cell(length(trialTypeList), 1);
for thisType = 1:length(trialTypeList)
    clear onsetList;
    onsetList = epochsEDF1(find(eType1 == trialeTypeList(thisType)));
    onsets1(thisType) = {onsetList};
end

if exist('epochsEDF2', 'var')
    
    % get rid of rejected epochs
    numEpochs2 = size(epochsEDF2,2);
    eType2 = eType(length(eType)-numEpochs2+1:end);
    epochsEDF2(rejectedEpochs2) = [];
    eType2(rejectedEpochs2) = [];
    
    % find onset times
    onsets2 = cell(length(trialTypeList), 1);
    for thisType = 1:length(trialTypeList)
        clear onsetList;
        onsetList = epochsEDF2(find(eType2 == trialeTypeList(thisType)));
        onsets2(thisType) = {onsetList};
    end
end

%%%%%%% step 2 %%%%%%%%%%%
% the second step in the Pepisode analysis is to obtain pepisode
% for every event of interest. The times are
% presented in terms of offset in samples in the eeg data file.

fprintf('\n\nretrieving Pepisode');

% parameters for retrieving Pepisode
intervalsNT = cat(1, preTele, teleNT, postNT);
durationsNT = round((intervalsNT(:,2) - intervalsNT(:,1))*EEG1.srate/1000);
intervalsFT = cat(1, preTele, teleFT, postFT);
durationsFT = round((intervalsFT(:,2) - intervalsFT(:,1))*EEG1.srate/1000);

% initialize summary arrays
PRE_1_all  = nan(length(trialTypeList), size(data1,1), size(frequencies,2));
TELE_1_all = PRE_1_all;
POST_1_all = PRE_1_all;
PRE_2_all  = PRE_1_all;
TELE_2_all = PRE_1_all;
POST_2_all = PRE_1_all;

allEpochDataDimNames = {'Electrodes x Epochs x Frequencies'};

for thisType = 1:length(trialTypeList) % loop through trial types
    
    % if NT
    if ~isempty(strfind('NT', trialTypeList{thisType}))
        PREunionVecHolder1 = nan(size(data1,1), size(onsets1{thisType}, 2), size(frequencies,2), durationsNT(1));
        TELEunionVecHolder1 = nan(size(data1,1), size(onsets1{thisType}, 2), size(frequencies,2), durationsNT(2));
        POSTunionVecHolder1 = nan(size(data1,1), size(onsets1{thisType}, 2), size(frequencies,2), durationsNT(3));
        
        if exist('onsets2', 'var')
            PREunionVecHolder2 = nan(size(data1,1), size(onsets2{thisType}, 2), size(frequencies,2), durationsNT(1));
            TELEunionVecHolder2 = nan(size(data1,1), size(onsets2{thisType}, 2), size(frequencies,2), durationsNT(2));
            POSTunionVecHolder2 = nan(size(data1,1), size(onsets2{thisType}, 2), size(frequencies,2), durationsNT(3));
        end
        
        intervals = intervalsNT;
    else
        % if FT
        PREunionVecHolder1 = nan(size(data1,1), size(onsets1{thisType}, 2), size(frequencies,2), durationsFT(1));
        TELEunionVecHolder1 = nan(size(data1,1), size(onsets1{thisType}, 2), size(frequencies,2), durationsFT(2));
        POSTunionVecHolder1 = nan(size(data1,1), size(onsets1{thisType}, 2), size(frequencies,2), durationsFT(3));
        
        if exist('onsets2', 'var')
            PREunionVecHolder2 = nan(size(data1,1), size(onsets2{thisType}, 2), size(frequencies,2), durationsFT(1));
            TELEunionVecHolder2 = nan(size(data1,1), size(onsets2{thisType}, 2), size(frequencies,2), durationsFT(2));
            POSTunionVecHolder2 = nan(size(data1,1), size(onsets2{thisType}, 2), size(frequencies,2), durationsFT(3));
        end
        
        intervals = intervalsFT;
    end
    
    for thisChan = 1:size(data1,1); % loop through electrodes
        
        % file containing pepisode power info for each frequency
        outFile = strcat(save_stem,'_', chanList{thisChan},'.mat');
        if exist('onsets2', 'var')
            PREunionVecHolder1(thisChan,:,:,:)  = getpepisodeTwoEEG(outFile, 1, onsets1{thisType} - startBin, intervals(1,2) - intervals(1,1), intervals(1), frequencies);
            TELEunionVecHolder1(thisChan,:,:,:) = getpepisodeTwoEEG(outFile, 1, onsets1{thisType} - startBin, intervals(2,2) - intervals(2,1), intervals(2), frequencies);
            POSTunionVecHolder1(thisChan,:,:,:) = getpepisodeTwoEEG(outFile, 1, onsets1{thisType} - startBin, intervals(3,2) - intervals(3,1), intervals(3), frequencies);
            
            PREunionVecHolder2(thisChan,:,:,:)  = getpepisodeTwoEEG(outFile, 2, onsets2{thisType}, intervals(1,2) - intervals(1,1), intervals(1), frequencies);
            TELEunionVecHolder2(thisChan,:,:,:) = getpepisodeTwoEEG(outFile, 2, onsets2{thisType}, intervals(2,2) - intervals(2,1), intervals(2), frequencies);
            POSTunionVecHolder2(thisChan,:,:,:) = getpepisodeTwoEEG(outFile, 2, onsets2{thisType}, intervals(3,2) - intervals(3,1), intervals(3), frequencies);
            
        else
            PREunionVecHolder1(thisChan,:,:,:)  = getpepisode(outFile, onsets1{thisType} - startBin, intervals(1,2) - intervals(1,1), intervals(1), frequencies);
            TELEunionVecHolder1(thisChan,:,:,:) = getpepisode(outFile, onsets1{thisType} - startBin, intervals(2,2) - intervals(2,1), intervals(2), frequencies);
            POSTunionVecHolder1(thisChan,:,:,:) = getpepisode(outFile, onsets1{thisType} - startBin, intervals(3,2) - intervals(3,1), intervals(3), frequencies);
        end
        
    end % thisChan
    
    % take the man across time so we can save out the data for each epoch
    mean_PRE_1_time = squeeze(nanmean(PREunionVecHolder1,4));
    mean_TELE_1_time = squeeze(nanmean(TELEunionVecHolder1,4));
    mean_POST_1_time = squeeze(nanmean(POSTunionVecHolder1,4));
    
    if exist('onsets2','var')
        mean_PRE_2_time = squeeze(nanmean(PREunionVecHolder2,4));
        mean_TELE_2_time = squeeze(nanmean(TELEunionVecHolder2,4));
        mean_POST_2_time = squeeze(nanmean(POSTunionVecHolder2,4));
        
        % if there aren't any trials in one set, use the other; otherwise
        % concatenate
        if length(size(mean_PRE_1_time)) == 2
            
            mean_PRE_1_time = mean_PRE_2_time;
            mean_TELE_1_time = mean_TELE_2_time;
            mean_POST_1_time = mean_POST_2_time;
            
        elseif length(size(mean_PRE_2_time)) == 2
        else
            mean_PRE_1_time = cat(2, mean_PRE_1_time, mean_PRE_2_time);
            mean_TELE_1_time = cat(2, mean_TELE_1_time, mean_TELE_2_time);
            mean_POST_1_time = cat(2, mean_POST_1_time, mean_POST_2_time);
        end
    end
    
    tempdata = {mean_PRE_1_time; mean_TELE_1_time; mean_POST_1_time};
    allEpochData(thisType) = {tempdata};
    
    % take the mean across epochs
    mean_PRE_1  = squeeze(nanmean(PREunionVecHolder1,2));
    mean_TELE_1 = squeeze(nanmean(TELEunionVecHolder1,2));
    mean_POST_1 = squeeze(nanmean(POSTunionVecHolder1,2));
    
    if exist('onsets2', 'var')
        mean_PRE_2  = squeeze(nanmean(PREunionVecHolder2,2));
        mean_TELE_2 = squeeze(nanmean(TELEunionVecHolder2,2));
        mean_POST_2 = squeeze(nanmean(POSTunionVecHolder2,2));
    end
    
    % take the mean across epochs
    mean_PRE_1  = squeeze(nanmean(mean_PRE_1,3));
    mean_TELE_1 = squeeze(nanmean(mean_TELE_1,3));
    mean_POST_1 = squeeze(nanmean(mean_POST_1,3));
    
    if exist('onsets2', 'var')
        mean_PRE_2  = squeeze(nanmean(mean_PRE_2,3));
        mean_TELE_2 = squeeze(nanmean(mean_TELE_2,3));
        mean_POST_2 = squeeze(nanmean(mean_POST_2,3));
    end
    
    % put into summary arrays
    PRE_1_all(thisType,:,:)  = mean_PRE_1;
    TELE_1_all(thisType,:,:) = mean_TELE_1;
    POST_1_all(thisType,:,:) = mean_POST_1;
    
    if exist('onsets2', 'var')
        PRE_2_all(thisType,:,:)  = mean_PRE_2;
        TELE_2_all(thisType,:,:) = mean_TELE_2;
        POST_2_all(thisType,:,:) = mean_POST_2;
    end
    
    
end % thisType

% save data for all epochs
save([save_stem '_all_epochs.mat'], 'allEpochData','allEpochDataDimNames');

% find nans
PRE_1_nan  = isnan(PRE_1_all);
TELE_1_nan = isnan(TELE_1_all);
POST_1_nan = isnan(POST_1_all);

if exist('onsets2' ,'var')
    PRE_2_nan  = isnan(PRE_2_all);
    TELE_2_nan = isnan(TELE_2_all);
    POST_2_nan = isnan(POST_2_all);
end

% if one condition is all NaN, this means there were no trials of that type
% in that EEG, so use the other EEG's data instead
if ~exist('onsets2', 'var')
    PRE_all = PRE_1_all;
    TELE_all = TELE_1_all;
    POST_all = POST_1_all;
else
    
    for thisType = 1:length(trialTypeList)
        
        % if EEG1 missing data
        if sum(sum(PRE_1_nan(thisType,:,:))) == size(PRE_1_nan,2) * size(PRE_1_nan,3)
            PRE_all(thisType,:,:)  = PRE_2_all(thisType,:,:);
            TELE_all(thisType,:,:) = TELE_2_all(thisType,:,:);
            POST_all(thisType,:,:) = POST_2_all(thisType,:,:);
            % if EEG2 missing data
        elseif sum(sum(PRE_2_nan(thisType,:,:))) == size(PRE_2_nan,2) * size(PRE_2_nan,3)
            PRE_all(thisType,:,:) = PRE_1_all(thisType,:,:);
            TELE_all(thisType,:,:) = TELE_1_all(thisType,:,:);
            POST_all(thisType,:,:) = POST_1_all(thisType,:,:);
        else % both have data
            PRE_all(thisType,:,:) = (PRE_1_all(thisType,:,:) + PRE_2_all(thisType,:,:)) / 2;
            TELE_all(thisType,:,:) = (TELE_1_all(thisType,:,:) + TELE_2_all(thisType,:,:)) / 2;
            POST_all(thisType,:,:) = (POST_1_all(thisType,:,:) + POST_2_all(thisType,:,:)) / 2;
            
        end
        
    end

end

% combine into one array
PepisodeByFreq = nan(3, size(PRE_all,1), size(PRE_all,2), size(PRE_all,3));
PepisodeByFreq(1,:,:,:) = PRE_all;
PepisodeByFreq(2,:,:,:) = TELE_all;
PepisodeByFreq(3,:,:,:) = POST_all;


%% get mean for each frequency band
deltaBand = find(frequencies >= 1 & frequencies <= 4);
thetaBand = find(frequencies > 4 & frequencies <= 8);
alphaBand = find(frequencies > 8 & frequencies <= 12);
betaBand  = find(frequencies > 12 & frequencies <= 30);
gammaBand = find(frequencies > 30);
freqNames = {'deltaBand','thetaBand','alphaBand','betaBand','gammaBand'};

% initialize summary array; 3 (pre/tele/post) x Trial Type x Electrode x
% Frequency Band
PepisodeByFreqBand = nan(3, size(PRE_1_all,1), size(PRE_1_all,2), length(freqNames));

for thisType = 1:length(trialTypeList)
    for thisFreq = 1:length(freqNames)
        freqs = eval(freqNames{thisFreq});
        PRE_data = squeeze(PRE_all(thisType,:,freqs));
        TELE_data = squeeze(TELE_all(thisType,:,freqs));
        POST_data = squeeze(POST_all(thisType,:,freqs));
        
        % take the mean across frequencies
        PepisodeByFreqBand(1,thisType,:,thisFreq) = mean(PRE_data,2);
        PepisodeByFreqBand(2,thisType,:,thisFreq) = mean(TELE_data,2);
        PepisodeByFreqBand(3,thisType,:,thisFreq) = mean(POST_data,2);
        
    end % thisFreq
end  % thisType

% Reorder dimensions so channels x condition x freqband x time interval
% (pre/tele/post)
PepisodeByFreqBand = permute(PepisodeByFreqBand, [3 2 4 1]);

% save data
save([save_stem '_by_condition.mat'],'PepisodeByFreq','PepisodeByFreqBand','F','trialTypeList','chanList');

% %% plot mean across channels
meanPepisode = squeeze(mean(PepisodeByFreqBand,1));

h = figure;

ax = subplot(221);
bar(squeeze(meanPepisode(1, :, :)));
set(gca,'XTickLabel',{'delta','theta','alpha','beta','gamma'});
title('NSNT')

ax = subplot(222);
bar(squeeze(meanPepisode(2, :, :)));
set(gca,'XTickLabel',{'delta','theta','alpha','beta','gamma'});
title('NSFT')

ax = subplot(223);
bar(squeeze(meanPepisode(3, :, :)));
set(gca,'XTickLabel',{'delta','theta','alpha','beta','gamma'});
title('FSNT')

ax = subplot(224);
bar(squeeze(meanPepisode(4, :, :)));
set(gca,'XTickLabel',{'delta','theta','alpha','beta','gamma'});
title('FSFT')
% 
% 
% % make plots for each electrode
% for thisChan = 1:size(PepisodeByFreqBand,1)
%     
%     h = figure;
%     
%     ax = subplot(221);
%     bar(squeeze(PepisodeByFreqBand(thisChan, 1, :, :)));
%     set(gca,'XTickLabel',{'delta','theta','alpha','beta','gamma'});
%     title('NSNT')
%     
%     ax = subplot(222);
%     bar(squeeze(PepisodeByFreqBand(thisChan, 2, :, :)));
%     set(gca,'XTickLabel',{'delta','theta','alpha','beta','gamma'});
%     title('NSFT')
%     
%     ax = subplot(223);
%     bar(squeeze(PepisodeByFreqBand(thisChan, 3, :, :)));
%     set(gca,'XTickLabel',{'delta','theta','alpha','beta','gamma'});
%     title('FSNT')
%     
%     ax = subplot(224);
%     bar(squeeze(PepisodeByFreqBand(thisChan, 4, :, :)));
%     set(gca,'XTickLabel',{'delta','theta','alpha','beta','gamma'});
%     title('FSFT')
% end
